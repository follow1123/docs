---
import LinkSelect from "./LinkSelect.astro";

// 详细类型参考：StarlightSidebarTopicsRouteData
// 这里只需要这三个属性
type Topic = {
  isCurrent: boolean;
  label: string;
  link: string;
};

const { topics } = Astro.locals?.starlightSidebarTopics;

const ungroupedName = "1gjkasfrewrdfksjil";
const groupedTopics = new Map<string, Array<Topic> | Topic>();

const isASCII = (c: string): boolean => {
  const codePoint = c.charCodeAt(0);
  return codePoint >= 0 && codePoint <= 127;
};

// 根据字符计算宽度
const getWidth = (str: string): number => {
  const chars = Array.from(str);
  let width = 0;
  chars.forEach((c) => (width += isASCII(c) ? 0.5 : 1.8));

  return width;
};
const groupWidthMap = new Map<string, number>();

// 最小宽度页面时的属性
const minSizeTopics = new Array<Topic>();
const minSizeTopicName = "主题";
let minSizeTopicWidth = getWidth(minSizeTopicName);

topics.forEach((t, i) => {
  const idx = t.label.indexOf("/");
  if (idx !== -1) {
    const groupName = t.label.substring(0, idx);
    if (!groupWidthMap.has(groupName)) {
      groupWidthMap.set(groupName, getWidth(groupName));
    }
    const topic = {
      ...t,
      label: t.label.substring(idx + 1),
    };
    minSizeTopics.push(topic);
    const curGroupWidth = getWidth(topic.label);

    // 计算最小宽度页面时下拉框的宽度
    if (curGroupWidth > minSizeTopicWidth) {
      minSizeTopicWidth = curGroupWidth;
    }

    const groupWidth = groupWidthMap.get(groupName) as number;
    if (curGroupWidth > groupWidth) {
      groupWidthMap.set(groupName, curGroupWidth);
    }

    if (groupedTopics.has(groupName)) {
      const gts = groupedTopics.get(groupName) as Array<Topic>;
      gts.push(topic);
    } else {
      const gts = new Array();
      gts.push(topic);
      groupedTopics.set(groupName, gts);
    }
  } else {
    // 计算最小宽度页面时下拉框的宽度
    const curWidth = getWidth(t.label);
    if (curWidth > minSizeTopicWidth) {
      minSizeTopicWidth = curWidth;
    }
    minSizeTopics.push(t);
    groupedTopics.set(ungroupedName + i, t);
  }
});

const groupedTopicsArr = Array.from(groupedTopics.entries());
---

<nav class="md-nav">
  <LinkSelect
    label={minSizeTopicName}
    options={minSizeTopics.map((t) => ({
      label: t.label,
      selected: t.isCurrent,
      value: t.link,
    }))}
    width={`${minSizeTopicWidth}em`}
  />
</nav>

<nav class="lg-nav">
  {
    groupedTopicsArr.map(([gName, topic]) => {
      if (gName.startsWith(ungroupedName)) {
        const t = topic as Topic;
        return (
          <a
            class:list={{ "current-topic": t.isCurrent }}
            href={t.link}
            set:text={t.label}
          />
        );
      } else {
        const ts = topic as Topic[];
        return (
          <LinkSelect
            label={gName}
            options={ts.map((t) => ({
              label: t.label,
              selected: t.isCurrent,
              value: t.link,
            }))}
            width={`${groupWidthMap.get(gName)}em`}
          />
        );
      }
    })
  }
</nav>

<style>
  nav {
    display: flex;
    gap: 1rem;
    justify-content: space-evenly;
    align-items: center;
  }

  nav a {
    text-decoration: none;

    transition-property:
      color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.15s;
    color: color-mix(in oklab, var(--foreground) 80%, transparent);
  }
  nav a:hover {
    color: color-mix(in oklab, var(--foreground) 80%, transparent);
  }

  nav a.active {
    color: var(--foreground);
  }

  .md-nav {
    display: none;
  }

  .current-topic {
    color: var(--sl-color-text-accent);
  }

  .md-nav,
  .lg-nav {
    padding: 0 0.5rem;
  }

  @media (max-width: 50rem) {
    .lg-nav {
      display: none;
    }
    .md-nav {
      display: block;
    }
  }
</style>
